// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @unique @default(uuid())
  email                 String?                @unique
  password              String?
  telegramId            String                 @unique @map("telegram_id")
  telegramUsername      String?                @map("telegram_username")
  fullName              String                 @map("full_name")
  shortId               String?                @unique @map("short_id")
  nickname              String?
  tonRawAddress         String?                @map("ton_raw_address")
  description           String?
  phoneNumber           String?                @map("phone_number")
  company               String?
  jobTitle              String?                @map("job_title")
  gender                Gender?
  address               String?
  avatarUrl             String?                @map("avatar_url")
  linkedInUrl           String?                @map("link_in_url")
  companyUrl            String?                @map("company_url")
  isPrivate             Boolean                @default(false) @map("is_private")
  isPrivateFeeds        Boolean                @default(false) @map("is_private_feeds")
  isDeleted             Boolean                @default(false) @map("is_deleted")
  activated             Boolean                @default(false)
  userRole              UserRole               @default(USER)
  userCategories        UserCategory[]
  userImages            UserImage[]
  following             UserConnection[]       @relation("UserToFolower")
  followers             UserConnection[]       @relation("FolowerToUser")
  joinedEventUsers      JoinedEventUser[]
  userVerification      UserVerification?
  userTokens            UserToken[]
  sentNotifications     Notification[]         @relation("SenderToReceiver")
  receivedNotifications Notification[]         @relation("ReceiverToSender")
  joinedEventPhaseUsers JoinedEventPhaseUser[]
  events                Event[]
  eventHosts            EventHost[]
  userCities            UserCity[]
  userEventFavorites    UserEventFavorite[]

  @@map("user")
}

model City {
  id            String      @id @unique @default(uuid())
  name          String      @unique
  country       String
  latitude      Float
  longitude     Float
  image         String?
  isHighlighted Boolean     @default(false) @map("is_highlighted")
  userCities    UserCity[]
  eventCities   EventCity[]
  event         Event[]

  @@map("city")
}

model UserCity {
  id     String @id @unique @default(uuid())
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  cityId String @map("city_id")
  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@unique([userId, cityId])
  @@map("user_city")
}

model EventCity {
  id      String @id @unique @default(uuid())
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  cityId  String @map("city_id")
  city    City   @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@map("event_city")
}

model UserToken {
  id           String   @id @unique @default(uuid())
  userId       String   @map("user_id")
  deviceToken  String?  @map("device_token")
  refreshToken String   @map("refresh_token")
  expiredDate  DateTime @map("expired_date")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_token")
}

model UserVerification {
  id          String       @id @unique @default(uuid())
  userId      String       @unique @map("user_id")
  verifyCode  String       @unique @map("verify_code")
  expiredDate DateTime     @map("expired_date")
  type        UserCodeType
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("user_verification ")
}

model UserCategory {
  id         String   @id @unique @default(uuid())
  categoryId String   @map("interest_id")
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, categoryId])
  @@map("user_category")
}

model UserImage {
  id     String @id @unique @default(uuid())
  url    String
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_image")
}

model UserConnection {
  id           String   @id @unique @default(uuid())
  userId       String   @map("user_id")
  followUserId String   @map("follow_user_id")
  accepted     Boolean  @default(false)
  followDate   DateTime @default(now()) @map("follow_date")
  follower     User     @relation("UserToFolower", fields: [userId], references: [id])
  following    User     @relation("FolowerToUser", fields: [followUserId], references: [id])

  @@unique([userId, followUserId])
  @@map("user_connection")
}

model Category {
  id           String         @id @unique @default(uuid())
  name         String
  events       Event[]
  UserCategory UserCategory[]

  @@map("category")
}

model Event {
  id                    String                 @id @unique @default(uuid())
  title                 String
  description           String?
  content               String?
  shortId               String                 @unique
  ticketPrice           Float                  @default(0) @map("tiket_price")
  ticketType            TicketType             @default(FREE) @map("ticket_type")
  createdAt             DateTime               @default(now()) @map("created_at")
  eventDate             DateTime               @map("event_date")
  eventEndDate          DateTime               @map("event_end_date")
  location              String?                @map("location")
  eventType             EventType              @default(NORMAL) @map("event_type")
  registUrl             String?                @map("regist_url")
  isHighlighted         Boolean                @default(false) @map("is_highlighted")
  isDeleted             Boolean                @default(false) @map("is_deleted")
  cityId                String?                @map("city_id")
  city                  City?                  @relation(fields: [cityId], references: [id], onDelete: Cascade)
  userId                String                 @map("user_id")
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventCategoryId       String                 @map("category_id")
  eventCategory         Category               @relation(fields: [eventCategoryId], references: [id], onDelete: Cascade)
  joinedEventUsers      JoinedEventUser[]
  eventHosts            EventHost[]
  eventAssets           EventAsset[]
  eventLocationDetail   EventLocationDetail?
  eventPhases           EventPhase[]
  joinedEventPhaseUsers JoinedEventPhaseUser[]
  eventLinks            EventLink[]
  eventUserTemps        EventUserTemp[]
  eventTags             EventTags[]
  eventCities           EventCity[]
  eventSponsors         EventSponsor[]
  eventSocials          EventSocial[]
  userEventFavorites    UserEventFavorite[]

  @@map("event")
}

model EventSponsor {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  eventId     String  @map("event_id")
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventSocial {
  id          String @id @unique @default(uuid())
  channelName String @map("channel_name")
  url         String
  eventId     String @map("event_id")
  event       Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model EventPhase {
  id                    String                 @id @unique @default(uuid())
  title                 String
  description           String?
  order                 Int                    @default(1)
  eventId               String                 @map("event_id")
  event                 Event                  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  joinedEventPhaseUsers JoinedEventPhaseUser[]

  @@map("event_phase")
}

model EventLocationDetail {
  id        String @id @unique @default(uuid())
  latitude  String
  longitude String
  eventId   String @unique @map("event_id")
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_location_detail")
}

model EventHost {
  id      String @id @unique @default(uuid())
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_host")
}

model EventAsset {
  id      String         @id @unique @default(uuid())
  url     String
  type    EventAssetType
  eventId String         @map("event_id")
  event   Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_asset")
}

model EventLink {
  id      String @id @unique @default(uuid())
  title   String
  url     String
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_link")
}

model EventTags {
  id      String @id @unique @default(uuid())
  title   String
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model UserEventFavorite {
  id      String @id @unique @default(uuid())
  eventId String @map("event_id")
  userId  String @map("user_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model JoinedEventUser {
  id          String    @id @unique @default(uuid())
  eventId     String    @map("event_id")
  userId      String    @map("user_id")
  knowEventBy String?   @map("know_event_by")
  joinDate    DateTime  @default(now()) @map("join_date")
  checkInDate DateTime? @map("check_in_date")
  checkedIn   Boolean   @default(false) @map("checked_in")
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("joined_event_user")
}

model JoinedEventPhaseUser {
  id           String     @id @unique @default(uuid())
  eventId      String     @map("event_id")
  userId       String     @map("user_id")
  eventPhaseId String     @map("event_phase_id")
  event        Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  EventPhase   EventPhase @relation(fields: [eventPhaseId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, eventPhaseId])
  @@map("joined_event_phase_user")
}

model EventUserTemp {
  id          String  @id @unique @default(uuid())
  email       String? @unique
  fullName    String  @map("full_name")
  company     String?
  jobTitle    String? @map("job_title")
  linkedInUrl String? @map("link_in_url")
  telegramId  String? @map("telegram_id")
  companyUrl  String? @map("company_url")
  knowEventBy String? @map("know_event_by")
  eventId     String  @map("event_id")
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_user_temp")
}

model Notification {
  id               String             @id @unique @default(uuid())
  senderId         String             @map("sender_id")
  receiverId       String             @map("receiver_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  objectId         String             @map("object_id")
  title            String
  body             String
  isRead           Boolean            @default(false) @map("is_read")
  status           NotificationStatus @default(ACTIVE)
  notificationType NotificationType   @map("notification_type")

  sender   User @relation("SenderToReceiver", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceiverToSender", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("notification")
}

model ImageBucket {
  id       Int      @id @unique @default(autoincrement())
  key      String   @unique
  url      String   @unique
  fileType FileType

  @@map("image_bucket")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserCodeType {
  VERIFICATION
  PASSWORD_RESET
}

enum NotificationType {
  EVENT_INVITATION
  EVENT_LIKED
  EVENT_JOINED
  NEW_FOLLOWER
}

enum UserRole {
  USER
  ADMIN
}

enum EventAssetType {
  THUMBNAIL
  BACKGROUND
  IMAGE
  VIDEO
}

enum NotificationStatus {
  ACTIVE
  INACTIVE
}

enum EventType {
  NORMAL
  READONLY
}

enum TicketType {
  FREE
  APPROVAL
  PAYMENT
}

enum FileType {
  THUMBNAIL
  BACKGROUND
  IMAGE
  VIDEO
  USER_AVATAR
}
