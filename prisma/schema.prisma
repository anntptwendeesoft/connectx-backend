// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @unique @default(uuid())
  email            String            @unique
  password         String?
  fullName         String            @map("full_name")
  nickname         String?
  description      String?
  country          String?
  phoneNumber      String?           @map("phone_number")
  gender           Gender?
  address          String?
  avatarUrl        String?           @map("avatar_url")
  isPrivate        Boolean           @default(false) @map("is_private")
  activated        Boolean           @default(false)
  userRole         UserRole          @default(USER)
  userImages       UserImage[]
  userInterests    UserInterest[]
  following        UserConnection[]  @relation("UserToFolower")
  followers        UserConnection[]  @relation("FolowerToUser")
  joinedEventUsers JoinedEventUser[]
  userVerification UserVerification?
  userTokens       UserToken[]

  @@map("user")
}

model UserToken {
  id           String   @id @unique @default(uuid())
  userId       String   @map("user_id")
  refreshToken String   @map("refresh_token")
  expiredDate  DateTime @map("expired_date")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_token")
}

model UserVerification {
  id          String       @id @unique @default(uuid())
  userId      String       @unique @map("user_id")
  verifyCode  String       @unique @map("verify_code")
  expiredDate DateTime     @map("expired_date")
  type        UserCodeType
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("user_verification ")
}

model UserInterest {
  id     String @id @unique @default(uuid())
  name   String
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_interest")
}

model UserImage {
  id     String @id @unique @default(uuid())
  url    String
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_image")
}

model UserConnection {
  id           String @id @unique @default(uuid())
  userId       String @map("user_id")
  followUserId String @map("follow_user_id")
  follower     User   @relation("UserToFolower", fields: [userId], references: [id])
  following    User   @relation("FolowerToUser", fields: [followUserId], references: [id])

  @@map("user_connection")
}

model EventCategory {
  id     String  @id @unique @default(uuid())
  name   String
  events Event[]

  @@map("event_category")
}

model Event {
  id               String            @id @unique @default(uuid())
  name             String
  tiketPrice       Float?            @map("tiket_price")
  createdAt        DateTime          @default(now()) @map("created_at")
  eventDate        DateTime          @map("event_date")
  location         String?           @map("location")
  description      String?
  sponsors         String?
  agenda           String?
  speakers         String?
  eventCategoryId  String            @map("category_id")
  eventCategory    EventCategory     @relation(fields: [eventCategoryId], references: [id], onDelete: Cascade)
  joinedEventUsers JoinedEventUser[]
  eventHosts       EventHost[]
  eventAssets      EventAsset[]

  @@map("event")
}

model EventHost {
  id      String  @id @unique @default(uuid())
  title   String?
  url     String?
  eventId String  @map("event_id")
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_host")
}

model EventAsset {
  id      String         @id @unique @default(uuid())
  url     String
  type    EventAssetType
  eventId String         @map("event_id")
  event   Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_asset")
}

model JoinedEventUser {
  id      String @id @unique @default(uuid())
  eventId String @map("event_id")
  userId  String @map("user_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("joined_event_user")
}

model Notification {
  id               String           @id @unique @default(uuid())
  senderId         String           @map("sender_id")
  objectId         String           @map("object_id")
  notificationType NotificationType @map("notification_type")

  @@map("notification")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserCodeType {
  VERIFICATION
  PASSWORD_RESET
}

enum NotificationType {
  EVENT_INVITATION
  EVENT_LIKE
  NEW_FOLLOWER
}

enum UserRole {
  USER
  ADMIN
}

enum EventAssetType {
  BACKGROUND
  IMAGE
}
