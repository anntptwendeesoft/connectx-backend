// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String            @id @unique @default(uuid())
  email                 String            @unique
  password              String?
  fullName              String            @map("full_name")
  nickname              String?
  description           String?
  country               String?
  phoneNumber           String?           @map("phone_number")
  company               String?
  gender                Gender?
  address               String?
  avatarUrl             String?           @map("avatar_url")
  isPrivate             Boolean           @default(false) @map("is_private")
  activated             Boolean           @default(false)
  userRole              UserRole          @default(USER)
  userImages            UserImage[]
  userInterests         UserInterest[]
  following             UserConnection[]  @relation("UserToFolower")
  followers             UserConnection[]  @relation("FolowerToUser")
  joinedEventUsers      JoinedEventUser[]
  userVerification      UserVerification?
  userTokens            UserToken[]
  sentNotifications     Notification[]    @relation("SenderToReceiver")
  receivedNotifications Notification[]    @relation("ReceiverToSender")

  @@map("user")
}

model UserToken {
  id           String   @id @unique @default(uuid())
  userId       String   @map("user_id")
  deviceToken  String?  @map("device_token")
  refreshToken String   @map("refresh_token")
  expiredDate  DateTime @map("expired_date")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_token")
}

model UserVerification {
  id          String       @id @unique @default(uuid())
  userId      String       @unique @map("user_id")
  verifyCode  String       @unique @map("verify_code")
  expiredDate DateTime     @map("expired_date")
  type        UserCodeType
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("user_verification ")
}

model UserInterest {
  id     String @id @unique @default(uuid())
  name   String
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("user_interest")
}

model UserImage {
  id     String @id @unique @default(uuid())
  url    String
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_image")
}

model UserConnection {
  id           String   @id @unique @default(uuid())
  userId       String   @map("user_id")
  followUserId String   @map("follow_user_id")
  accepted     Boolean
  followDate   DateTime @default(now()) @map("follow_date")
  follower     User     @relation("UserToFolower", fields: [userId], references: [id])
  following    User     @relation("FolowerToUser", fields: [followUserId], references: [id])

  @@unique([userId, followUserId])
  @@map("user_connection")
}

model EventCategory {
  id     String  @id @unique @default(uuid())
  name   String
  events Event[]

  @@map("event_category")
}

model Event {
  id                  String               @id @unique @default(uuid())
  name                String
  shortId             String               @unique
  tiketPrice          Float?               @map("tiket_price")
  createdAt           DateTime             @default(now()) @map("created_at")
  eventDate           DateTime             @map("event_date")
  eventEndDate        DateTime             @map("event_end_date")
  location            String?              @map("location")
  description         String?
  sponsors            String?
  agenda              String?
  speakers            String?
  eventCategoryId     String               @map("category_id")
  eventCategory       EventCategory        @relation(fields: [eventCategoryId], references: [id], onDelete: Cascade)
  joinedEventUsers    JoinedEventUser[]
  eventHosts          EventHost[]
  eventAssets         EventAsset[]
  eventLocationDetail EventLocationDetail?

  @@map("event")
}

model EventLocationDetail {
  id        String @id @unique @default(uuid())
  latitude  String
  longitude String
  eventId   String @unique @map("event_id")
  event     Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_location_detail")
}

model EventHost {
  id      String  @id @unique @default(uuid())
  title   String?
  url     String?
  eventId String  @map("event_id")
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_host")
}

model EventAsset {
  id      String         @id @unique @default(uuid())
  url     String
  type    EventAssetType
  eventId String         @map("event_id")
  event   Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_asset")
}

model JoinedEventUser {
  id          String    @id @unique @default(uuid())
  eventId     String    @map("event_id")
  userId      String    @map("user_id")
  joinDate    DateTime  @default(now()) @map("join_date")
  checkInDate DateTime? @map("check_in_date")
  checkedIn   Boolean   @default(false) @map("checked_in")
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@map("joined_event_user")
}

model Notification {
  id               String             @id @unique @default(uuid())
  senderId         String             @map("sender_id")
  receiverId       String             @map("receiver_id")
  createdAt        DateTime           @default(now()) @map("created_at")
  objectId         String             @map("object_id")
  title            String
  body             String
  isRead           Boolean            @default(false) @map("is_read")
  status           NotificationStatus @default(ACTIVE)
  notificationType NotificationType   @map("notification_type")

  sender   User @relation("SenderToReceiver", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceiverToSender", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("notification")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserCodeType {
  VERIFICATION
  PASSWORD_RESET
}

enum NotificationType {
  EVENT_INVITATION
  EVENT_LIKED
  EVENT_JOINED
  NEW_FOLLOWER
}

enum UserRole {
  USER
  ADMIN
}

enum EventAssetType {
  BACKGROUND
  IMAGE
}

enum NotificationStatus {
  ACTIVE
  INACTIVE
}
