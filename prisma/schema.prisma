// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @unique @default(uuid())
  email            String            @unique
  password         String?
  fullname         String
  nickname         String?
  description      String?
  country          String?
  gender           Gender?
  address          String?
  avatarUrl        String?           @map("avatar_url")
  userImages       UserImage[]
  userInterests    UserInterest[]
  following        UserConnection[]  @relation("UserToFolower")
  followers        UserConnection[]  @relation("FolowerToUser")
  joinedEventUsers JoinedEventUser[]

  @@map("user")
}

model UserInterest {
  id     String @id @unique @default(uuid())
  name   String
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_interest")
}

model UserImage {
  id     String @id @unique @default(uuid())
  url    String
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_image")
}

model UserConnection {
  id           String @id @unique @default(uuid())
  userId       String @map("user_id")
  followUserId String @map("follow_user_id")
  follower     User   @relation("UserToFolower", fields: [userId], references: [id])
  following    User   @relation("FolowerToUser", fields: [followUserId], references: [id])

  @@map("user_connection")
}

model EventCategory {
  id     String  @id @unique @default(uuid())
  name   String
  logo   String
  events Event[]

  @@map("event_category")
}

model Event {
  id               String            @id @unique @default(uuid())
  name             String
  tiketPrice       Float             @map("tiket_price")
  createdAt        DateTime          @default(now()) @map("created_at")
  eventDate        DateTime          @map("event_date")
  location         String            @map("location")
  description      String
  sponsors         String
  agenda           String
  speakers         String
  eventCategoryId  String            @map("category_id")
  eventCategory    EventCategory     @relation(fields: [eventCategoryId], references: [id], onDelete: Cascade)
  joinedEventUsers JoinedEventUser[]

  @@map("event")
}

model JoinedEventUser {
  id      String @id @unique @default(uuid())
  eventId String @map("event_id")
  userId  String @map("user_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("joined_event_user")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
